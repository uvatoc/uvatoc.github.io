{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**cs3102 Fall 2019**\n",
    "\n",
    "## Problem Set 0 (Part 2): Jupyter Warmup\n",
    "\n",
    "   \n",
    "**Purpose**  \n",
    "The goal of this part of Problem Set 0 is to introduce you to Jupyter notebooks, which we will use for several of the assignments in this class (roughly, part of every other problem set). \n",
    "\n",
    "### Introduction to Jupyter Notebooks\n",
    "\n",
    "Jupyter notebooks are a convenient way to combine text and code in one document. A document is composed of _cell_s, each of which can contain either formatted text (using Markdown) or executable code (using Python). You can execute a cell in the notebook using `command-Enter`.\n",
    "\n",
    "We will use Python 3 for the notebooks in this class. If you don't have any previous experience with Python, you should be able to pick up what you need for this class pretty quickly, and we are not concerned with using Python idioms or style correctly for cs3102, just using code as a medium for understanding and exploring ideas. See the course website [LINK] for some links to Python tutorials if you want a more general introduction to Python programming.\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try executing the cell below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Jupyter! It is now 2019-08-23 09:50:48.158986\n"
     ]
    }
   ],
   "source": [
    "import datetime # needed for getting the current time\n",
    "\n",
    "print(\"Welcome to Jupyter! It is now \" + str(datetime.datetime.now()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining Sets\n",
    "\n",
    "Python already provides a built-in `set` datatype, which is what you should use if you want to use sets in a real problem. But, for understanding purposes, we are going to define our own set datatype which we will call `mset` to avoid confusion with Python's built-in sets. (Python does provide mechansisms for defining classes, but we won't use them here. We'll just use a naming convention to define our `mset` datatype with regular functions.)\n",
    "\n",
    "Our goal is to match as closely as possible the definition of a mathematical set, as given in the textbook. (Problem 3 in this assignment asks you to explain how our Python `mset` datatype compares to a mathematical set.) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mset_empty():\n",
    "    \"\"\"Returns a new empty set.\"\"\"\n",
    "    return [] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(mset_empty())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need two built-in operations to define a set: membership test (contains) and insert:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mset_contains(s, x):\n",
    "    \"\"\"Returns a Boolean indicating if x is in the set t.\"\"\"\n",
    "    return x in s\n",
    "\n",
    "def mset_insert(s, x):\n",
    "    \"\"\"Returns a new set that contains all of the elements of s as well as the new element x.\"\"\"\n",
    "    return s + [x]\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = mset_insert(mset_insert(mset_insert(mset_empty(), 1), 2), 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "print (s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_contains(s, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_contains(s, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_insert(s, 4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problem 4.** (Note: Problems 1-3 are in `ps0.tex`.) Does `s` contain 4? (You should answer by writing code to test membership, and then a text block that explains why you got the output you did.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fill in with your code for Problem 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "_replace with your explanation for Problem 4_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we define a function for testing whether a set is a subset of another set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mset_subset(s, t):\n",
    "    \"\"\"Returns Boolean indicating if set s is a subset of set t. (From 1.4.1: A set ùëÜ \n",
    "    is a subset of a set ùëá, denoted by ùëÜ ‚äÜ ùëá, if every element of ùëÜ is also an \n",
    "    element of ùëá.) \n",
    "    \"\"\"\n",
    "    for x in s:\n",
    "        if not mset_contains(t, x):\n",
    "            return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_subset(mset_empty(), mset_empty())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "s1 = mset_insert(mset_empty(), 1)\n",
    "s2 = mset_insert(s1, 2)\n",
    "s3 = mset_insert(s2, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_subset(s2, s3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_subset(s3, s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mset_subset(s1, s3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problem 5.** Define a function, `mset_equal(s, t)` that tests two sets for equality. A set S is equal to a set T, if S and T contain the same elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mset_equal(s, t):\n",
    "    \"\"\"Returns a Boolean indicating if set s is equal to set t.\"\"\"\n",
    "    pass # replace with your code for Problem 5 (try to come up with a one-line solution)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert(mset_equal(mset_empty(), mset_empty()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert(mset_equal(s3, s3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert(not mset_equal(s2, s3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert(not mset_equal(s3, mset_insert(s2, 'dog')))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### End of Jupyter Notebook for Problem Set 0\n",
    "\n",
    "See `ps0.tex` for Problem 6 and the instructions on how to submit your responses (including this notebook)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
